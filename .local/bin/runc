#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  #!/bin/bash -eu
  
  TEMP_FILE="$(mktemp)"
  TEMP_EXECUTABLE="$(mktemp)"
  
  finish() {
  	rm -f "$TEMP_FILE"
  	rm -f "$TEMP_EXECUTABLE"
  }
  
  trap finish EXIT
  
  CODE="$(cat)"
  
  generate_c_program "$CODE" > "$TEMP_FILE"
  
  gcc -xc "$TEMP_FILE" -o "$TEMP_EXECUTABLE" 2>/dev/null
  
  "$TEMP_EXECUTABLE"
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
runc_usage() {
  if [[ -n $long_usage ]]; then
    printf "runc - Quickly compile and run a C program\n"
    echo 
  else
    printf "runc - Quickly compile and run a C program\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  runc\n"
  printf "  runc --help | -h\n"
  printf "  runc --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  C_LIB_DIR"
    printf "    Location of c libraries\n"
    printf "    Default: $HOME/dotfiles/src/runc/src/c_lib\n"
    echo
    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  runc <<EOF\n    printf(\"Hello world!\n\");\n  EOF\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# :src/lib/generate_c_program.sh
#!/bin/bash
## Add any function here that is needed in more than one parts of your
## application, or that you otherwise wish to extract from the main function
## scripts.
##
## Note that code here should be wrapped inside bash functions, and it is
## recommended to have a separate file for each function.
##
## Subdirectories will also be scanned for *.sh, so you have no reason not
## to organize your code neatly.
##
generate_c_program() {
  local code="${1?No code}"
  cat <<-EOF
    #include <stdio.h>
    #include <stdlib.h>
EOF
  for lib in "${C_LIB_DIR?No c_lib dir}"/*.c; do
    sed -n '/\bHEADER_START/,/\bHEADER_END/p' "$lib"
  done
  for lib in "${C_LIB_DIR?No c_lib dir}"/*.c; do
    sed -n '/\bFUNCTIONS_START/,/\bFUNCTIONS_END/p' "$lib"
  done
  cat <<-EOF
    int main(int argc, char *argv[])
    {
EOF
  for lib in "${C_LIB_DIR?No c_lib dir}"/*.c; do
    sed -n '/\bMAIN_CODE_START/,/\bMAIN_CODE_END/p' "$lib"
  done
  cat <<-EOF
      $code
    }
EOF
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    runc_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  export C_LIB_DIR="${C_LIB_DIR:-$HOME/dotfiles/src/runc/src/c_lib}"
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  ## Code here runs inside the initialize() function
  ## Use it for anything that you need to run before any other function, like
  ## setting environment vairables:
  ## CONFIG_FILE=settings.ini
  ##
  ## Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
